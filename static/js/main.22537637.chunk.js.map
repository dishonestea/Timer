{"version":3,"sources":["ting.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","setInitialTime","state","initialTimeSet","isActive","isEnded","setState","timer","secondUp","secondDown","minuteUp","minuteDown","breakSecondUp","breakTimer","breakSecondDown","breakMinuteUp","breakMinuteDown","pauseClicked","timerID","setInterval","clearInterval","pauseBreakClicked","isBreakActive","isBreakStarted","resetClicked","isBreakEnded","pauseButton","prevState","pauseBreakButton","showTime","minutes","Math","floor","seconds","className","showBreakTime","startBreak","play","audio","Audio","ting","counterImages","i","counter","push","pauseAndSetTime","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22537637.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ting.2ed3ed02.wav\";","import React from 'react';\nimport './App.css';\nimport ting from './ting.wav';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: 10,\n      isActive: false,\n      isEnded: false,\n      counter: 0,\n      initialTimeSet: 0,\n      breakTimer: 5,\n      isBreakStarted: false,\n      isBreakActive: false,\n      isBreakEnded: false\n\n    };\n  }\n\n    setInitialTime = () => {\n      if(this.state.initialTimeSet !== 0 && this.state.isActive === false && this.state.isEnded === false){\n        this.setState(state => ({\n          initialTimeSet: this.state.timer\n        }))\n      }\n    }\n\n\n    secondUp = () => {\n      this.setState((state, props) => ({\n        timer: state.timer + 1\n      }));\n    }\n\n    secondDown = () => {\n      this.setState((state, props) => ({\n        timer: state.timer - 1\n      }));\n    }\n\n    minuteUp = () => {\n      this.setState((state, props) => ({\n        timer: state.timer + 60\n      }));\n    }\n\n    minuteDown = () => {\n      if(this.state.timer > 60){\n      this.setState((state, props) => ({\n        timer: state.timer - 60\n      }));\n    }\n    }\n\n    breakSecondUp = () => {\n      this.setState((state, props) => ({\n        breakTimer: state.breakTimer + 1\n      }));\n    }\n\n    breakSecondDown = () => {\n      this.setState((state, props) => ({\n        breakTimer: state.breakTimer - 1\n      }));\n    }\n\n    breakMinuteUp = () => {\n      this.setState((state, props) => ({\n        breakTimer: state.breakTimer + 60\n      }));\n    }\n\n    breakMinuteDown = () => {\n      this.setState((state, props) => ({\n        breakTimer: state.breakTimer - 60\n      }));\n    }\n\n    pauseClicked = () => {\n      if (this.state.isActive === true && this.state.isEnded === false) {\n        this.timerID = setInterval(\n          () => this.secondDown(),\n          1000);}\n          else {\n            clearInterval(this.timerID);\n          }\n      }\n\n      pauseBreakClicked = () => {\n        if (this.state.isBreakActive === true && this.state.isBreakStarted === true) {\n          this.timerID = setInterval(\n            () => this.breakSecondDown(),\n            1000);}\n            else {\n              clearInterval(this.timerID);\n            }\n        }\n\n    resetClicked = () => {\n    this.setState({\n      timer: 10,\n      isActive: false,\n      isEnded: false,\n      breakTimer: 5,\n      isBreakStarted: false,\n      isBreakActive: false,\n      isBreakEnded: false\n      });\n      clearInterval(this.timerID);\n    }\n    \n    pauseButton = () => {\n      if(this.state.isEnded === false){\n      this.setState(prevState => ({\n        isActive: !prevState.isActive\n      })\n      , () => this.pauseClicked(),)\n    }\n    }\n\n    pauseBreakButton = () => {\n      if(this.state.isBreakStarted === true){\n      this.setState(prevState => ({\n        isBreakActive: !prevState.isBreakActive\n      })\n      , () => this.pauseBreakClicked(),)\n    }\n    }\n\n    showTime = () => {\n      let minutes = Math.floor(this.state.timer/60);\n      let seconds = this.state.timer%60;\n      \n      if(seconds > 9){\n      return(\n      <h1 className = 'largerFont'>{this.state.isEnded? \"Time's Up\" :\n      `${minutes}:${seconds}`\n    }</h1>);\n  } else {\n    return(\n      <h1 className = 'largerFont'>{this.state.isEnded? \"Time's Up\" :\n      `${minutes}:0${seconds}`\n    }</h1>);\n  }\n\n }\n    \n showBreakTime = () => {\n  let minutes = Math.floor(this.state.breakTimer/60);\n  let seconds = this.state.breakTimer%60;\n\n  if(seconds > 9){\n    return(\n    <h1 className = 'largerFont'>{this.state.isBreakEnded? \"Break time's Up\" :\n    `${minutes}:${seconds} (break)`\n  }</h1>);\n} else {\n  return(\n    <h1 className = 'largerFont'>{this.state.isBreakEnded? \"Break time's Up\" :\n    `${minutes}:0${seconds} (break)`\n  }</h1>);\n}\n\n}\n\n    startBreak = () =>{\n      this.play();\n      this.pauseBreakClicked();\n    }\n\n\n    componentDidUpdate() {\n      if (this.state.timer <= 0 && this.state.isEnded === false && this.state.isBreakStarted === false) {\n        \n        clearInterval(this.timerID);\n        this.setState({\n          isActive: false,\n          isEnded: true,\n          initialTimeSet: 0,\n          isBreakStarted: true,\n          isBreakActive: true,\n\n        }, () => this.startBreak());\n        this.setState(state => ({\n          counter: state.counter + 1\n        }));\n      } else if(this.state.breakTimer <= 0 && this.state.isBreakEnded === false && this.state.isBreakStarted === true){\n\n        clearInterval(this.timerID);\n        this.setState({\n          isBreakEnded: true\n        }, () => this.play());\n\n      }\n    }\n     audio = new Audio(ting);\n\n    play = () => {\n      this.audio.play()\n    }\n\n    counterImages = () => {\n      let i = 0;\n      let counterImages = [];\n      for( i > 0; i < this.state.counter; i++){\n        counterImages.push(\"#\");\n      }\n      return counterImages;\n    }\n\n    pauseAndSetTime = () => {\n      this.pauseButton();\n      this.setInitialTime();\n    }\n    \n\n\n  render() {\n\n    return (\n      <div className = 'App'>\n        \n        <h2 className = 'title'>Timer</h2>\n        <p>{this.state.counter}</p>\n        {this.state.isBreakStarted?\n         <div>\n        <div className = 'showtime'>{this.showBreakTime()}</div>\n        <div className = 'times'>\n        <p className = 'tex'>Minutes</p>\n        <div className = 'minutes'>\n        <button className = 'timeButton plusButton' onClick={() => this.breakMinuteUp()}>+</button>\n        <button className = 'timeButton minusButton' onClick={() => this.breakMinuteDown()}>-</button>\n        </div>\n        <p className = ' tex'>Seconds</p>\n        <div className = 'seconds'>\n        <button className = 'timeButton plusButton' onClick={() => this.breakSecondUp()}>+</button>\n        <button className = 'timeButton minusButton' onClick={() => this.breakSecondDown()}>-</button>\n        </div>\n        </div>\n        <div className = 'resume'>\n        <button className = 'resumeButton' onClick={() => this.pauseBreakButton()}>{this.state.isBreakActive ? \"Pause\" : \"Start\"}</button>\n        </div>\n        </div> \n          : \n        \n        <div>\n        <div className = 'showtime'>{this.showTime()}</div>\n        <div className = 'times'>\n        <p className = 'tex'>Minutes</p>\n        <div className = 'minutes'>\n        <button className = 'timeButton plusButton' onClick={() => this.minuteUp()}>+</button>\n        <button className = 'timeButton minusButton' onClick={() => this.minuteDown()}>-</button>\n        </div>\n        <p className = ' tex'>Seconds</p>\n        <div className = 'seconds'>\n        <button className = 'timeButton plusButton' onClick={() => this.secondUp()}>+</button>\n        <button className = 'timeButton minusButton' onClick={() => this.secondDown()}>-</button>\n        </div>\n        </div>\n        <div className = 'resume'>\n        <button className = 'resumeButton' onClick={() => this.pauseButton()}>{this.state.isActive ? \"Pause\" : \"Start\"}</button>\n        </div>\n        </div>\n\n        }\n        \n        <div className = 'reset'>\n        <button className = 'resetButton' onClick={() => this.resetClicked()}>Reset</button>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}