{"version":3,"sources":["ting.wav","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","secondUp","setState","state","timer","secondDown","minuteUp","minuteDown","pauseClicked","isActive","isEnded","timerID","setInterval","clearInterval","resetClicked","pauseButton","prevState","showTime","minutes","Math","floor","seconds","className","audio","Audio","ting","play","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1cb57ea1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ting.2ed3ed02.wav\";","import React from 'react';\nimport './App.css';\nimport ting from './ting.wav';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timer: 300,\n      isActive: false,\n      isEnded: false\n    };\n  }\n\n    secondUp = () => {\n      this.setState((state, props) => ({\n        timer: state.timer + 1\n      }));\n    }\n\n    secondDown = () => {\n      this.setState((state, props) => ({\n        timer: state.timer - 1\n      }));\n    }\n\n    minuteUp = () => {\n      this.setState((state, props) => ({\n        timer: state.timer + 60\n      }));\n    }\n\n    minuteDown = () => {\n      if(this.state.timer > 60){\n      this.setState((state, props) => ({\n        timer: state.timer - 60\n      }));\n    }\n    }\n\n    pauseClicked = () => {\n      if (this.state.isActive === true && this.state.isEnded === false) {\n        this.timerID = setInterval(\n          () => this.secondDown(),\n          1000);}\n          else {\n            clearInterval(this.timerID);\n          }\n      }\n\n    resetClicked = () => {\n    this.setState({\n      timer: 300,\n      isActive: false,\n      isEnded: false\n      });\n      clearInterval(this.timerID);\n    }\n    \n    pauseButton = () => {\n      if(this.state.isEnded === false){\n      this.setState(prevState => ({\n        isActive: !prevState.isActive\n      })\n      , () => this.pauseClicked(),)\n    }\n    }\n\n    showTime = () => {\n      let minutes = Math.floor(this.state.timer/60);\n      let seconds = this.state.timer%60;\n      \n      if(seconds > 9){\n      return(\n      <h1 className = 'largerFont'>{this.state.isEnded? \"Time's Up\" :\n      `${minutes}:${seconds}`\n    }</h1>);\n  } else {\n    return(\n      <h1 className = 'largerFont'>{this.state.isEnded? \"Time's Up\" :\n      `${minutes}:0${seconds}`\n    }</h1>);\n  }\n  \n\n    }\n    \n    componentDidUpdate() {\n      if (this.state.timer <= 0 && this.state.isEnded === false) {\n        \n        clearInterval(this.timerID);\n        this.setState({\n          isActive: false,\n          isEnded: true\n        }, () => this.play());\n      }\n    }\n     audio = new Audio(ting);\n\n    play = () => {\n      this.audio.play()\n    }\n\n\n  render() {\n\n    return (\n      <div className = 'App'>\n\n        <h2 className = 'title'>Timer</h2>\n        <div className = 'showtime'>{this.showTime()}</div>\n        <div className = 'times'>\n        <p>Minutes</p>\n        <div className = 'minutes'>\n        <button className = 'timeButton plusButton' onClick={() => this.minuteUp()}>+</button>\n        <button className = 'timeButton minusButton' onClick={() => this.minuteDown()}>-</button>\n        </div>\n        <p>Seconds</p>\n        <div className = 'seconds'>\n        <button className = 'timeButton plusButton' onClick={() => this.secondUp()}>+</button>\n        <button className = 'timeButton minusButton' onClick={() => this.secondDown()}>-</button>\n        </div>\n        </div>\n        <div className = 'resume'>\n        <button className = 'resumeButton' onClick={() => this.pauseButton()}>{this.state.isActive ? \"Pause\" : \"Start\"}</button>\n        </div>\n        <div className = 'reset'>\n        <button className = 'resetButton' onClick={() => this.resetClicked()}>Reset</button>\n        </div>\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}